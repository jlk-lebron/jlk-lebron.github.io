(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{343:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),s("p",[t._v("UI 更新需要昂贵的 DOM 操作，因此 React 内部使用了几种巧妙的技术来最小化 DOM 操作次数")]),t._v(" "),s("h2",{attrs:{id:"减轻-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减轻-state"}},[t._v("#")]),t._v(" 减轻 state")]),t._v(" "),s("p",[t._v("和渲染相关的数据存储到 state,与渲染无关的数据不要存储在 state 里面 . 如果将与渲染无关的数据存储到 state 中,修改数据时调用 setState.是导致组件更新.造成没有必要的重新渲染")]),t._v(" "),s("h2",{attrs:{id:"shouldcomponentupdate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate"}},[t._v("#")]),t._v(" shouldComponentUpdate")]),t._v(" "),s("p",[t._v("shouldComponentUpdate 在组件的更新阶段执行.")]),t._v(" "),s("p",[t._v("父组件更新或调用当前组件的 setState 会触发 shouldComponentUpdate.")]),t._v(" "),s("p",[t._v("shouldComponentUpdate 的返回值绝对了组件 render 函数是否执行. 返回 true 执行,返回 false 不执行")]),t._v(" "),s("h2",{attrs:{id:"purecomponent-纯组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#purecomponent-纯组件"}},[t._v("#")]),t._v(" PureComponent(纯组件)")]),t._v(" "),s("p",[s("code",[t._v("shouldComponentUpdate")]),t._v("有一个缺点: 如果组件中的 state 和 props 很多,则开发者需要写很多判断表达式,令人厌烦.所以 react 提供了一个 "),s("code",[t._v("PureComponent")]),t._v(" 帮我们解决这个问题")]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("import React, { Component, PureComponent } from 'react'\n// 在Demo组件中继承PureComponent 可以实现和shouldComponentUpdate相同的效果\nexport default class Demo extends PureComponent {\n  state = {\n    msg: 'hello scu',\n  }\n\n  render() {\n    console.log('demo更新了')\n    return (\n      <div>\n        Demo\n        <span>{this.props.count}</span> <br />\n        <span>{this.state.msg}</span> <br />\n        <button\n          onClick={() => {\n            this.setState({\n              msg: 123,\n            })\n          }}\n        >\n          demo-按钮\n        </button>\n      </div>\n    )\n  }\n}\n")])])]),s("p",[s("strong",[s("code",[t._v("React.PureComponent")]),t._v(" 与 "),s("code",[t._v("React.Component")]),t._v("很相似。两者的区别在于 "),s("code",[t._v("React.Component")]),t._v("并未实现 "),s("code",[t._v("shouldComponentUpdate()")]),t._v("，而 "),s("code",[t._v("React.PureComponent")]),t._v(" 中以浅层对比 prop 和 state 的方式来实现了该函数。")])]),t._v(" "),s("p",[s("strong",[t._v("注意:")]),s("code",[t._v("React.PureComponent")]),t._v(" 中的 "),s("code",[t._v("shouldComponentUpdate()")]),t._v(" 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button\n  onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接修改obj中name的值.纯组件在比较时,只比较obj中存储的对象地址是否发生变化,这时不认为数据变化,则不会正确更新")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  demo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("按钮\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("解决方式:")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button\n  onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据obj生成新的newObj对象. 将newObj赋值给obj.这时obj的地址发生变化,组件就可以正确更新了")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际开发中,经常会使用第三方组件,第三方组件中可能使用了PureComponent,所以修改数据时,最好都根据旧数据生成新数据,以避免组件无法更新的错误")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    newObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  demo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("按钮\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"usestate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),s("blockquote",[s("p",[t._v("shouldComponentUpdate 和 PureComponent 只使用于类组件,函数组件无法使用. 所以 react 团队在定义 "),s("code",[t._v("useState")]),t._v("的时候,就考虑到了这个问题. 如果使用 useState 定义状态,则状态没有发生变化,函数组件不会更新.")])]),t._v(" "),s("h2",{attrs:{id:"react-memo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-memo"}},[t._v("#")]),t._v(" React.memo")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("useState")]),t._v("已经处理了 state 没有变化,则函数组件不更新. 但是父组件更新,作为子组件的函数组件还是会更新,所以 react 提供了 memo 方法,帮我们解决这个问题")])]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Test组件只在父组件传入新的props时更新")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("memo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("React.Memo 默认情况下只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现")]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("function equal(prevProps, nextProps) {\n  // prevProps是上一次props数据\n  // nextProps是最新的props数据\n  // 注意: 如果返回true则不更新,返回false则更新\n  return prevProps.属性 === nextProps.属性\n}\nimport React from 'react'\n\nfunction Test() {\n  // Test组件只在父组件传入新的props时更新\n  return <div>Test</div>\n}\nexport default React.memo(Test, equal)\n")])])]),s("h2",{attrs:{id:"key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[t._v("#")]),t._v(" key")]),t._v(" "),s("p",[t._v("列表渲染时给子元素添加 key，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素。减少子元素的重新创建. "),s("strong",[t._v("再次强调:")]),t._v(" key 需要在父元素范围内不重复,并具有稳定性")])])}),[],!1,null,null,null);s.default=e.exports}}]);