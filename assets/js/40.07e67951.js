(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{354:function(a,t,e){"use strict";e.r(t);var n=e(7),s=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"原始数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[a._v("#")]),a._v(" 原始数据类型")]),a._v(" "),t("p",[a._v("JavaScript 的类型分为两种：原始数据类型和复杂数据类型（对象类型）。")]),a._v(" "),t("p",[a._v("原始数据类型包括：布尔值、数值、字符串、"),t("code",[a._v("null")]),a._v("、"),t("code",[a._v("undefined")]),a._v(" 以及 ES6 中的新类型 "),t("code",[a._v("Symbol")]),a._v("和 ES10 中的新类型 "),t("code",[a._v("BigInt")]),a._v("。")]),a._v(" "),t("p",[a._v("本节主要介绍"),t("strong",[a._v("前五种")]),a._v("原始数据类型在 TypeScript 中的应用。")]),a._v(" "),t("h2",{attrs:{id:"布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[a._v("#")]),a._v(" 布尔值")]),a._v(" "),t("p",[a._v("布尔值是最基础的数据类型，在 TypeScript 中，使用 "),t("code",[a._v("boolean")]),a._v(" 定义布尔值类型：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" isDone"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("注意，使用构造函数 "),t("code",[a._v("Boolean")]),a._v(" 创造的对象"),t("strong",[a._v("不是")]),a._v("布尔值：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" createdByNewBoolean"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Type 'Boolean' is not assignable to type 'boolean'.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//   'boolean' is a primitive, but 'Boolean' is a wrapper object. Prefer using 'boolean' when possible.")]),a._v("\n")])])]),t("p",[a._v("事实上 "),t("code",[a._v("new Boolean()")]),a._v(" 返回的是一个 "),t("code",[a._v("Boolean")]),a._v(" 对象：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let createdByNewBoolean: Boolean = new Boolean(1);\n")])])]),t("p",[a._v("直接调用 "),t("code",[a._v("Boolean")]),a._v(" 也可以返回一个 "),t("code",[a._v("boolean")]),a._v(" 类型：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" createdByBoolean"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("在 TypeScript 中，"),t("code",[a._v("boolean")]),a._v(" 是 JavaScript 中的基本类型，而 "),t("code",[a._v("Boolean")]),a._v(" 是 JavaScript 中的构造函数。其他基本类型（除了 "),t("code",[a._v("null")]),a._v(" 和 "),t("code",[a._v("undefined")]),a._v("）一样，不再赘述。")]),a._v(" "),t("h2",{attrs:{id:"数值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值"}},[a._v("#")]),a._v(" 数值")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("number")]),a._v(" 定义数值类型：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" decLiteral"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  十六进制表示法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" hexLiteral"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0xf00d")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制表示法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" binaryLiteral"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 八进制表示法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" octalLiteral"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0o744")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" notANumber"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("NaN")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" infinityNumber"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("Infinity")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("编译结果：")]),a._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" decLiteral "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" hexLiteral "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0xf00d")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ES6 中的二进制表示法编译之后变成10进制")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" binaryLiteral "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ES6 中的八进制表示法编译之后变成10进制")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" octalLiteral "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("484")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" notANumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("NaN")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" infinityNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("Infinity")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("#")]),a._v(" 字符串")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("string")]),a._v(" 定义字符串类型：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" myName"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Tom'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" myAge"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 模板字符串")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" sentence"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("Hello, my name is ")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),a._v("myName"),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v(".\nI'll be ")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),a._v("myAge "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v(" years old next month.")]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("编译结果：")]),a._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" myName "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Tom'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" myAge "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 模板字符串")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sentence "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, my name is "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" myName "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('".\\nI\'ll be "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("myAge "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" years old next month."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"空值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空值"}},[a._v("#")]),a._v(" 空值")]),a._v(" "),t("p",[a._v("在 TypeScript 中，可以用 "),t("code",[a._v("void")]),a._v(" 表示函数没有返回值")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function alertName(): void {\n    alert('My name is Tom');\n}\n")])])]),t("p",[a._v("声明一个 "),t("code",[a._v("void")]),a._v(" 类型的变量没有什么用，因为你只能将它赋值为 "),t("code",[a._v("undefined")]),a._v(" 和 "),t("code",[a._v("null")])]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let unusable: void = undefined;\n")])])]),t("h2",{attrs:{id:"null-和-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[a._v("#")]),a._v(" Null 和 Undefined")]),a._v(" "),t("p",[a._v("在 TypeScript 中，可以使用 "),t("code",[a._v("null")]),a._v(" 和 "),t("code",[a._v("undefined")]),a._v(" 来定义这两个原始数据类型：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" u"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("undefined")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("undefined")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("与 "),t("code",[a._v("void")]),a._v(" 的区别是，"),t("code",[a._v("undefined")]),a._v(" 和 "),t("code",[a._v("null")]),a._v(" 是所有类型的子类型。也就是说 "),t("code",[a._v("undefined")]),a._v(" 类型的变量，可以赋值给 "),t("code",[a._v("number")]),a._v(" 类型的变量：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("// 这样不会报错\nlet num: number = undefined;\n")])])]),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("// 这样也不会报错\nlet u: undefined;\nlet num: number = u;\n")])])]),t("p",[a._v("而 "),t("code",[a._v("void")]),a._v(" 类型的变量不能赋值给 "),t("code",[a._v("number")]),a._v(" 类型的变量：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let u: void;\nlet num: number = u;\n\n// Type 'void' is not assignable to type 'number'.\n")])])]),t("h1",{attrs:{id:"任意值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任意值"}},[a._v("#")]),a._v(" 任意值")]),a._v(" "),t("p",[a._v("任意值（Any）用来表示允许赋值为任意类型。")]),a._v(" "),t("h2",{attrs:{id:"什么是任意值类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是任意值类型"}},[a._v("#")]),a._v(" 什么是任意值类型")]),a._v(" "),t("p",[a._v("如果是一个普通类型，在赋值过程中改变类型是不被允许的：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber: string = 'seven';\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.\n")])])]),t("p",[a._v("但如果是 "),t("code",[a._v("any")]),a._v(" 类型，则允许被赋值为任意类型。")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber: any = 'seven';\nmyFavoriteNumber = 7;\n")])])]),t("h2",{attrs:{id:"任意值的属性和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任意值的属性和方法"}},[a._v("#")]),a._v(" 任意值的属性和方法")]),a._v(" "),t("p",[a._v("在任意值上访问任何属性都是允许的：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let anyThing: any = 'Tom';\nconsole.log(anyThing.myName);\nconsole.log(anyThing.myName.firstName);\nanyThing.setName('Jerry');\nanyThing.setName('Jerry').sayHello();\nanyThing.myName.setFirstName('Cat');\n")])])]),t("p",[a._v("可以认为，"),t("strong",[a._v("声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"未声明类型的变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#未声明类型的变量"}},[a._v("#")]),a._v(" 未声明类型的变量")]),a._v(" "),t("p",[t("strong",[a._v("变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let something;\nsomething = 'seven';\nsomething = 7;\n\nsomething.setName('Tom');\n")])])]),t("p",[a._v("等价于")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let something: any;\nsomething = 'seven';\nsomething = 7;\n\nsomething.setName('Tom');\n")])])]),t("h1",{attrs:{id:"类型推论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推论"}},[a._v("#")]),a._v(" 类型推论")]),a._v(" "),t("p",[a._v("如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。")]),a._v(" "),t("h2",{attrs:{id:"什么是类型推论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是类型推论"}},[a._v("#")]),a._v(" 什么是类型推论")]),a._v(" "),t("p",[a._v("以下代码虽然没有指定类型，但是会在编译的时候报错：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.\n")])])]),t("p",[a._v("事实上，它等价于：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber: string = 'seven';\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.\n")])])]),t("p",[a._v("TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。")]),a._v(" "),t("p",[t("strong",[a._v("如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 "),t("code",[a._v("any")]),a._v(" 类型而完全不被类型检查")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n")])])]),t("h1",{attrs:{id:"联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[a._v("#")]),a._v(" 联合类型")]),a._v(" "),t("p",[a._v("联合类型（Union Types）表示取值可以为多种类型中的一种。")]),a._v(" "),t("h2",{attrs:{id:"简单的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子"}},[a._v("#")]),a._v(" 简单的例子")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber: string | number;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n")])])]),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let myFavoriteNumber: string | number;\nmyFavoriteNumber = true;\n\n// index.ts(2,1): error TS2322: Type 'boolean' is not assignable to type 'string | number'.\n//   Type 'boolean' is not assignable to type 'number'.\n")])])]),t("p",[a._v("联合类型使用 "),t("code",[a._v("|")]),a._v(" 分隔每个类型。")]),a._v(" "),t("p",[a._v("这里的 "),t("code",[a._v("let myFavoriteNumber: string | number")]),a._v(" 的含义是，允许 "),t("code",[a._v("myFavoriteNumber")]),a._v(" 的类型是 "),t("code",[a._v("string")]),a._v(" 或者 "),t("code",[a._v("number")]),a._v("，但是不能是其他类型。")]),a._v(" "),t("h2",{attrs:{id:"访问联合类型的属性或方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问联合类型的属性或方法"}},[a._v("#")]),a._v(" 访问联合类型的属性或方法")]),a._v(" "),t("p",[a._v("当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们"),t("strong",[a._v("只能访问此联合类型的所有类型里共有的属性或方法")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function getLength(something: string | number): number {\n    return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n//   Property 'length' does not exist on type 'number'.\n")])])]),t("p",[a._v("上例中，"),t("code",[a._v("length")]),a._v(" 不是 "),t("code",[a._v("string")]),a._v(" 和 "),t("code",[a._v("number")]),a._v(" 的共有属性，所以会报错。")]),a._v(" "),t("p",[a._v("访问 "),t("code",[a._v("string")]),a._v(" 和 "),t("code",[a._v("number")]),a._v(" 的共有属性是没问题的：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function getString(something: string | number): string {\n    return something.toString();\n}\n")])])]),t("p",[a._v("联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" myFavoriteNumber"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nmyFavoriteNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'seven'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("myFavoriteNumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 5")]),a._v("\nmyFavoriteNumber "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("console")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("myFavoriteNumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 编译时报错")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.")]),a._v("\n")])])]),t("p",[a._v("上例中，第二行的 "),t("code",[a._v("myFavoriteNumber")]),a._v(" 被推断成了 "),t("code",[a._v("string")]),a._v("，访问它的 "),t("code",[a._v("length")]),a._v(" 属性不会报错。")]),a._v(" "),t("p",[a._v("而第四行的 "),t("code",[a._v("myFavoriteNumber")]),a._v(" 被推断成了 "),t("code",[a._v("number")]),a._v("，访问它的 "),t("code",[a._v("length")]),a._v(" 属性时就报错了")]),a._v(" "),t("h1",{attrs:{id:"对象的类型-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的类型-接口"}},[a._v("#")]),a._v(" 对象的类型——接口")]),a._v(" "),t("p",[a._v("在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。")]),a._v(" "),t("h2",{attrs:{id:"什么是接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是接口"}},[a._v("#")]),a._v(" 什么是接口")]),a._v(" "),t("p",[a._v("在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。")]),a._v(" "),t("p",[a._v("TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。")]),a._v(" "),t("h2",{attrs:{id:"简单的例子-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子-2"}},[a._v("#")]),a._v(" 简单的例子")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    name: string;\n    age: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n")])])]),t("p",[a._v("上面的例子中，我们定义了一个接口 "),t("code",[a._v("Person")]),a._v("，接着定义了一个变量 "),t("code",[a._v("tom")]),a._v("，它的类型是 "),t("code",[a._v("Person")]),a._v("。这样，我们就约束了 "),t("code",[a._v("tom")]),a._v(" 的形状必须和接口 "),t("code",[a._v("Person")]),a._v(" 一致。")]),a._v(" "),t("p",[a._v("接口一般首字母大写。"),t("code",[a._v("有的编程语言中会建议接口的名称加上")]),a._v(" I "),t("code",[a._v("前缀")]),a._v("。")]),a._v(" "),t("p",[a._v("定义的变量比接口少了一些属性或多一些属性都是不允许的：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    name: string;\n    age: number;\n}\n\nlet tom: Person = {\n     name: 'Tom',\n     gender: 'male'\n};\n\n//test.ts:8:3 - error TS2322: Type '{ name: string; gender: string; }' is not assignable to type 'Person'.\n\n")])])]),t("p",[a._v("可见，"),t("strong",[a._v("赋值的时候，变量的形状必须和接口的形状保持一致")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"可选属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可选属性"}},[a._v("#")]),a._v(" 可选属性")]),a._v(" "),t("p",[a._v("有时我们希望不要完全匹配一个形状，那么可以用可选属性：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    name: string;\n    age?: number;\n}\n\nlet tom: Person = {\n    name: 'Tom'\n};\n")])])]),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    name: string;\n    age?: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n")])])]),t("p",[a._v("可选属性的含义是该属性可以不存在。")]),a._v(" "),t("p",[a._v("这时"),t("strong",[a._v("仍然不允许添加未定义的属性")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    name: string;\n    age?: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25,\n    gender: 'male'\n};\n\n// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.\n//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.\n")])])]),t("h2",{attrs:{id:"任意属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任意属性"}},[a._v("#")]),a._v(" 任意属性")]),a._v(" "),t("p",[a._v("有时候我们希望一个接口允许有任意的属性，可以使用如下方式：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    age"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("propName"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" tom"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Person "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Tom'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    gender"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'male'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("使用 "),t("code",[a._v("[propName: string]")]),a._v(" 定义了任意属性取 "),t("code",[a._v("string")]),a._v(" 类型的值。")]),a._v(" "),t("p",[a._v("需要注意的是，"),t("strong",[a._v("一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-TypeScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    age"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("propName"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" tom"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Person "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Tom'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    age"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    gender"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'male'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// test.ts:3:3 - error TS2411: Property 'age' of type 'number' is not assignable to 'string' index type 'string'.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// test.ts:7:5 - error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  Property 'age' is incompatible with index signature.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//    Type 'number' is not assignable to type 'string'.")]),a._v("\n")])])]),t("p",[a._v("上例中，任意属性的值允许是 "),t("code",[a._v("string")]),a._v("，但是可选属性 "),t("code",[a._v("age")]),a._v(" 的值却是 "),t("code",[a._v("number")]),a._v("，"),t("code",[a._v("number")]),a._v(" 不是 "),t("code",[a._v("string")]),a._v(" 的子属性，所以报错了。")]),a._v(" "),t("p",[a._v("一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string | number;// 或 any\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25,\n    gender: 'male'\n};\n")])])]),t("h2",{attrs:{id:"只读属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只读属性"}},[a._v("#")]),a._v(" 只读属性")]),a._v(" "),t("p",[a._v("有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 "),t("code",[a._v("readonly")]),a._v(" 定义只读属性：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    id: 89757,\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 9527;\n\n// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.\n")])])]),t("p",[a._v("上例中，使用 "),t("code",[a._v("readonly")]),a._v(" 定义的属性 "),t("code",[a._v("id")]),a._v(" 初始化后，又被赋值了，所以报错了。")]),a._v(" "),t("p",[t("strong",[a._v("注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 89757;\n\n// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable to type 'Person'.\n//   Property 'id' is missing in type '{ name: string; gender: string; }'.\n// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.\n")])])]),t("p",[a._v("上例中，报错信息有两处，第一处是在对 "),t("code",[a._v("tom")]),a._v(" 进行赋值的时候，没有给 "),t("code",[a._v("id")]),a._v(" 赋值。")]),a._v(" "),t("p",[a._v("第二处是在给 "),t("code",[a._v("tom.id")]),a._v(" 赋值的时候，由于它是只读属性，所以报错了")]),a._v(" "),t("h1",{attrs:{id:"数组的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的类型"}},[a._v("#")]),a._v(" 数组的类型")]),a._v(" "),t("p",[a._v("在 TypeScript 中，数组类型有多种定义方式，比较灵活。")]),a._v(" "),t("h2",{attrs:{id:"「类型-方括号」表示法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#「类型-方括号」表示法"}},[a._v("#")]),a._v(" 「类型 + 方括号」表示法")]),a._v(" "),t("p",[a._v("最简单的方法是使用「类型 + 方括号」来表示数组：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let fibonacci: number[] = [1, 1, 2, 3, 5];\n")])])]),t("p",[a._v("数组的项中"),t("strong",[a._v("不允许")]),a._v("出现其他的类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let fibonacci: number[] = [1, '1', 2, 3, 5];\n\n// Type 'string' is not assignable to type 'number'.\n")])])]),t("p",[a._v("数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let fibonacci: number[] = [1, 1, 2, 3, 5];\nfibonacci.push('8');\n\n// Argument of type '\"8\"' is not assignable to parameter of type 'number'.\n")])])]),t("p",[a._v("上例中，"),t("code",[a._v("push")]),a._v(" 方法只允许传入 "),t("code",[a._v("number")]),a._v(" 类型的参数，但是却传了一个 "),t("code",[a._v('"8"')]),a._v(" 类型的参数，所以报错了。这里 "),t("code",[a._v('"8"')]),a._v(" 是一个字符串字面量类型，会在后续章节中详细介绍。")]),a._v(" "),t("h2",{attrs:{id:"数组泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组泛型"}},[a._v("#")]),a._v(" 数组泛型")]),a._v(" "),t("p",[a._v("我们也可以使用数组泛型（Array Generic） "),t("code",[a._v("Array<elemType>")]),a._v(" 来表示数组：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let fibonacci: Array<number> = [1, 1, 2, 3, 5];\n")])])]),t("p",[a._v("关于泛型，可以参考"),t("a",{attrs:{href:"http://localhost:8080/advanced/generics.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("泛型"),t("OutboundLink")],1),a._v("一章。")]),a._v(" "),t("h2",{attrs:{id:"用接口表示数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用接口表示数组"}},[a._v("#")]),a._v(" 用接口表示数组")]),a._v(" "),t("p",[a._v("接口也可以用来描述数组：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface NumberArray {\n    [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n")])])]),t("p",[t("code",[a._v("NumberArray")]),a._v(" 表示：只要索引的类型是数字时，那么值的类型必须是数字。")]),a._v(" "),t("p",[a._v("虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。")]),a._v(" "),t("p",[a._v("不过有一种情况例外，那就是它常用来表示类数组。")]),a._v(" "),t("h2",{attrs:{id:"类数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类数组"}},[a._v("#")]),a._v(" 类数组")]),a._v(" "),t("p",[a._v("类数组（Array-like Object）不是数组类型，比如 "),t("code",[a._v("arguments")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function sum() {\n    let args: number[] = arguments;\n}\n\n// Type 'IArguments' is missing the following properties from type 'number[]': pop, push, concat, join, and 24 more.\n")])])]),t("p",[a._v("上例中，"),t("code",[a._v("arguments")]),a._v(" 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Args {\n  [index: number]: any\n  length: number\n  callee: Function\n}\nfunction sum() {\n  let args: Args = arguments\n}\n// 或简写\nfunction sum() {\n    let args: {\n        [index: number]: any;\n        length: number;\n        callee: Function;\n    } = arguments;\n}\n")])])]),t("p",[a._v("在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是any，也约束了它还有 "),t("code",[a._v("length")]),a._v(" 和 "),t("code",[a._v("callee")]),a._v(" 两个属性。")]),a._v(" "),t("p",[a._v("事实上常用的类数组都有自己的接口定义，如 "),t("code",[a._v("IArguments")]),a._v(", "),t("code",[a._v("NodeList")]),a._v(", "),t("code",[a._v("HTMLCollection")]),a._v(" 等：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function sum() {\n    let args: IArguments = arguments;\n}\n")])])]),t("h2",{attrs:{id:"any-在数组中的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#any-在数组中的应用"}},[a._v("#")]),a._v(" any 在数组中的应用")]),a._v(" "),t("p",[a._v("一个比较常见的做法是，用 "),t("code",[a._v("any")]),a._v(" 表示数组中允许出现任意类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let list: any[] = ['xcatliu', 25, { website: 'http://xcatliu.com' }];\n")])])]),t("h1",{attrs:{id:"函数的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数的类型"}},[a._v("#")]),a._v(" 函数的类型")]),a._v(" "),t("h2",{attrs:{id:"函数声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[a._v("#")]),a._v(" 函数声明")]),a._v(" "),t("p",[a._v("在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）：")]),a._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 函数声明（Function Declaration）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 函数表达式（Function Expression）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("mySum")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function sum(x: number, y: number): number {\n    return x + y;\n}\n")])])]),t("p",[a._v("注意，"),t("strong",[a._v("输入多余的（或者少于要求的）参数，是不被允许的")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function sum(x: number, y: number): number {\n    return x + y;\n}\nsum(1, 2, 3);\n\n// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.\n")])])]),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function sum(x: number, y: number): number {\n    return x + y;\n}\nsum(1);\n\n// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.\n")])])]),t("h2",{attrs:{id:"函数表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[a._v("#")]),a._v(" 函数表达式")]),a._v(" "),t("p",[a._v("如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let mySum = function (x: number, y: number): number {\n    return x + y;\n};\n")])])]),t("p",[a._v("这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 "),t("code",[a._v("mySum")]),a._v("，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 "),t("code",[a._v("mySum")]),a._v(" 添加类型，则应该是这样：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n};\n")])])]),t("p",[a._v("注意不要混淆了 TypeScript 中的 "),t("code",[a._v("=>")]),a._v(" 和 ES6 中的 "),t("code",[a._v("=>")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"用接口定义函数的形状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用接口定义函数的形状"}},[a._v("#")]),a._v(" 用接口定义函数的形状")]),a._v(" "),t("p",[a._v("我们也可以使用接口的方式来定义一个函数需要符合的形状：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface SearchFunc {\n  (source: string, subString: string): boolean\n}\n\nlet mySearch: SearchFunc = function (source, subString) {\n  return source.search(subString) !== -1\n}\n")])])]),t("p",[a._v("采用函数表达式|接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。")]),a._v(" "),t("h2",{attrs:{id:"可选参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可选参数"}},[a._v("#")]),a._v(" 可选参数")]),a._v(" "),t("p",[a._v("前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？")]),a._v(" "),t("p",[a._v("与接口中的可选属性类似，我们用 "),t("code",[a._v("?")]),a._v(" 表示可选的参数：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n")])])]),t("p",[a._v("需要注意的是，可选参数必须接在必需参数后面。换句话说，"),t("strong",[a._v("可选参数后面不允许再出现必需参数了")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function buildName(firstName?: string, lastName: string) {\n    if (firstName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return lastName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName(undefined, 'Tom');\n\n// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.\n")])])]),t("h2",{attrs:{id:"参数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数默认值"}},[a._v("#")]),a._v(" 参数默认值")]),a._v(" "),t("p",[a._v("在 ES6 中，我们允许给函数的参数添加默认值，"),t("strong",[a._v("TypeScript 会将添加了最后一个设置了默认值的参数识别为可选参数")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n")])])]),t("p",[a._v("此时就不受「可选参数必须接在必需参数后面」的限制了：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function buildName(firstName: string = 'Tom', lastName: string) {\n    return firstName + ' ' + lastName;\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet cat = buildName(undefined, 'Cat');\n")])])]),t("h2",{attrs:{id:"剩余参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#剩余参数"}},[a._v("#")]),a._v(" 剩余参数")]),a._v(" "),t("p",[a._v("ES6 中，可以使用 "),t("code",[a._v("...rest")]),a._v(" 的方式获取函数中的剩余参数（rest 参数）：")]),a._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("items")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    items"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("item")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("item"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("事实上，"),t("code",[a._v("items")]),a._v(" 是一个数组。所以我们可以用数组的类型来定义它：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function push(array: any[], ...items: any[]) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n}\n\npush([], 1, 2, 3);\n")])])]),t("h2",{attrs:{id:"重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[a._v("#")]),a._v(" 重载")]),a._v(" "),t("p",[a._v("重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。")]),a._v(" "),t("p",[a._v("比如，我们需要实现一个函数 "),t("code",[a._v("reverse")]),a._v("，输入数字 "),t("code",[a._v("123")]),a._v(" 的时候，输出反转的数字 "),t("code",[a._v("321")]),a._v("，输入字符串 "),t("code",[a._v("'hello'")]),a._v(" 的时候，输出反转的字符串 "),t("code",[a._v("'olleh'")]),a._v("。")]),a._v(" "),t("p",[a._v("利用联合类型，我们可以这么实现：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function reverse(x: number | string): number | string | void {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n}\n")])])]),t("p",[t("strong",[a._v("然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。")])]),a._v(" "),t("p",[a._v("这时，我们可以使用重载定义多个 "),t("code",[a._v("reverse")]),a._v(" 的函数类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number | string): number | string | void {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n}\n")])])]),t("p",[a._v("上例中，我们重复定义了多次函数 "),t("code",[a._v("reverse")]),a._v("，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。")]),a._v(" "),t("p",[a._v("注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。")]),a._v(" "),t("h1",{attrs:{id:"类型断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[a._v("#")]),a._v(" 类型断言")]),a._v(" "),t("p",[a._v("类型断言（Type Assertion）可以用来手动指定一个值的类型。")]),a._v(" "),t("h2",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("变量 as 类型\n")])])]),t("p",[a._v("或")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("<类型>变量\n")])])]),t("p",[a._v("在 tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者，即 "),t("code",[a._v("值 as 类型")]),a._v("。")]),a._v(" "),t("p",[a._v("形如 "),t("code",[a._v("<Foo>")]),a._v(" 的语法在 tsx 中表示的是一个 react元素，在 ts 中除了表示类型断言之外，也可能是表示一个"),t("a",{attrs:{href:"http://localhost:8080/advanced/generics.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("泛型"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("p",[a._v("故建议大家在使用类型断言时，统一使用 "),t("code",[a._v("值 as 类型")]),a._v(" 这样的语法。")]),a._v(" "),t("h2",{attrs:{id:"类型断言的用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型断言的用途"}},[a._v("#")]),a._v(" 类型断言的用途")]),a._v(" "),t("p",[a._v("类型断言的常见用途有以下几种：")]),a._v(" "),t("h3",{attrs:{id:"将一个联合类型断言为其中一个类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一个联合类型断言为其中一个类型"}},[a._v("#")]),a._v(" 将一个联合类型断言为其中一个类型")]),a._v(" "),t("p",[a._v("当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们"),t("strong",[a._v("只能访问此联合类型的所有类型中共有的属性或方法")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction getName(animal: Cat | Fish) {\n    return animal.name;\n}\n")])])]),t("p",[a._v("而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法，比如：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction isFish(animal: Cat | Fish) {\n    if (typeof animal.swim === 'function') {\n        return true;\n    }\n    return false;\n}\n\n// index.ts:11:23 - error TS2339: Property 'swim' does not exist on type 'Cat | Fish'.\n//   Property 'swim' does not exist on type 'Cat'.\n")])])]),t("p",[a._v("上面的例子中，获取 "),t("code",[a._v("animal.swim")]),a._v(" 的时候会报错。")]),a._v(" "),t("p",[a._v("此时可以使用类型断言，将 "),t("code",[a._v("animal")]),a._v(" 断言成 "),t("code",[a._v("Fish")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction isFish(animal: Cat | Fish) {\n    if (typeof (animal as Fish).swim === 'function') {\n        return true;\n    }\n    return false;\n}\n")])])]),t("p",[a._v("这样就可以解决访问 "),t("code",[a._v("animal.swim")]),a._v(" 时报错的问题了。")]),a._v(" "),t("p",[a._v("需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction swim(animal: Cat | Fish) {\n    (animal as Fish).swim();\n}\n\nconst tom: Cat = {\n    name: 'Tom',\n    run() { console.log('run') }\n};\nswim(tom);\n// Uncaught TypeError: animal.swim is not a function`\n")])])]),t("p",[a._v("上面的例子编译时不会报错，但在运行时会报错：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("Uncaught TypeError: animal.swim is not a function`\n")])])]),t("p",[a._v("原因是 "),t("code",[a._v("(animal as Fish).swim()")]),a._v(" 这段代码隐藏了 "),t("code",[a._v("animal")]),a._v(" 可能为 "),t("code",[a._v("Cat")]),a._v(" 的情况，将 "),t("code",[a._v("animal")]),a._v(" 直接断言为 "),t("code",[a._v("Fish")]),a._v(" 了，而 TypeScript 编译器信任了我们的断言，故在调用 "),t("code",[a._v("swim()")]),a._v(" 时没有编译错误。")]),a._v(" "),t("p",[a._v("可是 "),t("code",[a._v("swim")]),a._v(" 函数接受的参数是 "),t("code",[a._v("Cat | Fish")]),a._v("，一旦传入的参数是 "),t("code",[a._v("Cat")]),a._v(" 类型的变量，由于 "),t("code",[a._v("Cat")]),a._v(" 上没有 "),t("code",[a._v("swim")]),a._v(" 方法，就会导致运行时错误了。")]),a._v(" "),t("p",[a._v("总之，使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。")]),a._v(" "),t("h3",{attrs:{id:"将一个父类断言为更加具体的子类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一个父类断言为更加具体的子类"}},[a._v("#")]),a._v(" 将一个父类断言为更加具体的子类")]),a._v(" "),t("p",[a._v("当类之间有继承关系时，类型断言也是很常见的：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("class ApiError extends Error {\n    code: number = 0;\n}\nclass HttpError extends Error {\n    statusCode: number = 200;\n}\n\nfunction isApiError(error: Error) {\n    if (typeof (error as ApiError).code === 'number') {\n        return true;\n    }\n    return false;\n}\n")])])]),t("p",[a._v("上面的例子中，我们声明了函数 "),t("code",[a._v("isApiError")]),a._v("，它用来判断传入的参数是不是 "),t("code",[a._v("ApiError")]),a._v(" 类型，为了实现这样一个函数，它的参数的类型肯定得是比较抽象的父类 "),t("code",[a._v("Error")]),a._v("，这样的话这个函数就能接受 "),t("code",[a._v("Error")]),a._v(" 或它的子类作为参数了。")]),a._v(" "),t("p",[a._v("但是由于父类 "),t("code",[a._v("Error")]),a._v(" 中没有 "),t("code",[a._v("code")]),a._v(" 属性，故直接获取 "),t("code",[a._v("error.code")]),a._v(" 会报错，需要使用类型断言获取 "),t("code",[a._v("(error as ApiError).code")]),a._v("。")]),a._v(" "),t("p",[a._v("大家可能会注意到，在这个例子中有一个更合适的方式来判断是不是 "),t("code",[a._v("ApiError")]),a._v("，那就是使用 "),t("code",[a._v("instanceof")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("class ApiError extends Error {\n    code: number = 0;\n}\nclass HttpError extends Error {\n    statusCode: number = 200;\n}\n\nfunction isApiError(error: Error) {\n    if (error instanceof ApiError) {\n        return true;\n    }\n    return false;\n}\n")])])]),t("p",[a._v("上面的例子中，确实使用 "),t("code",[a._v("instanceof")]),a._v(" 更加合适，因为 "),t("code",[a._v("ApiError")]),a._v(" 是一个 JavaScript 的类，能够通过 "),t("code",[a._v("instanceof")]),a._v(" 来判断 "),t("code",[a._v("error")]),a._v(" 是否是它的实例。")]),a._v(" "),t("p",[a._v("但是有的情况下 "),t("code",[a._v("ApiError")]),a._v(" 和 "),t("code",[a._v("HttpError")]),a._v(" 不是一个真正的类，而只是一个 TypeScript 的接口（"),t("code",[a._v("interface")]),a._v("），接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法使用 "),t("code",[a._v("instanceof")]),a._v(" 来做运行时判断了：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface ApiError extends Error {\n    code: number;\n}\ninterface HttpError extends Error {\n    statusCode: number;\n}\n\nfunction isApiError(error: Error) {\n    if (error instanceof ApiError) {\n        return true;\n    }\n    return false;\n}\n\n// index.ts:9:26 - error TS2693: 'ApiError' only refers to a type, but is being used as a value here.\n")])])]),t("p",[a._v("此时就只能用类型断言，通过判断是否存在 "),t("code",[a._v("code")]),a._v(" 属性，来判断传入的参数是不是 "),t("code",[a._v("ApiError")]),a._v(" 了：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("interface ApiError extends Error {\n    code: number;\n}\ninterface HttpError extends Error {\n    statusCode: number;\n}\n\nfunction isApiError(error: Error) {\n    if (typeof (error as ApiError).code === 'number') {\n        return true;\n    }\n    return false;\n}\n")])])]),t("h3",{attrs:{id:"将任何一个类型断言为-any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将任何一个类型断言为-any"}},[a._v("#")]),a._v(" 将任何一个类型断言为 "),t("code",[a._v("any")])]),a._v(" "),t("p",[a._v("理想情况下，TypeScript 的类型系统运转良好，每个值的类型都具体而精确。")]),a._v(" "),t("p",[a._v("但有的时候，我们非常确定这段代码不会出错，比如下面这个例子：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("window.foo = 1;\n\n// index.ts:1:8 - error TS2339: Property 'foo' does not exist on type 'Window & typeof globalThis'.\n")])])]),t("p",[a._v("上面的例子中，我们需要将 "),t("code",[a._v("window")]),a._v(" 上添加一个属性 "),t("code",[a._v("foo")]),a._v("，但 TypeScript 编译时会报错，提示我们 "),t("code",[a._v("window")]),a._v(" 上不存在 "),t("code",[a._v("foo")]),a._v(" 属性。")]),a._v(" "),t("p",[a._v("此时我们可以使用 "),t("code",[a._v("as any")]),a._v(" 临时将 "),t("code",[a._v("window")]),a._v(" 断言为 "),t("code",[a._v("any")]),a._v(" 类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("(window as any).foo = 1;\n")])])]),t("p",[a._v("在 "),t("code",[a._v("any")]),a._v(" 类型的变量上，访问任何属性都是允许的。")]),a._v(" "),t("p",[a._v("需要注意的是，将一个变量断言为 "),t("code",[a._v("any")]),a._v(" 可以说是解决 TypeScript 中类型问题的最后一个手段。")]),a._v(" "),t("p",[t("strong",[a._v("它极有可能掩盖了真正的类型错误，所以如果不是非常确定，就不要使用 "),t("code",[a._v("as any")]),a._v("。")])]),a._v(" "),t("p",[a._v("上面的例子中，我们也可以通过解决这个错误，不过如果只是临时的增加 "),t("code",[a._v("foo")]),a._v(" 属性，"),t("code",[a._v("as any")]),a._v(" 会更加方便。")]),a._v(" "),t("p",[a._v("总之，"),t("strong",[a._v("一方面不能滥用 "),t("code",[a._v("as any")]),a._v("，另一方面也不要完全否定它的作用，我们需要在类型的严格性和开发的便利性之间掌握平衡")]),a._v("，才能发挥出 TypeScript 最大的价值。")]),a._v(" "),t("h3",{attrs:{id:"将-any-断言为一个具体的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将-any-断言为一个具体的类型"}},[a._v("#")]),a._v(" 将 "),t("code",[a._v("any")]),a._v(" 断言为一个具体的类型")]),a._v(" "),t("p",[a._v("在日常的开发中，我们不可避免的需要处理 "),t("code",[a._v("any")]),a._v(" 类型的变量，它们可能是由于第三方库未能定义好自己的类型，也有可能是历史遗留的或其他人编写的烂代码，还可能是受到 TypeScript 类型系统的限制而无法精确定义类型的场景。")]),a._v(" "),t("p",[a._v("遇到 "),t("code",[a._v("any")]),a._v(" 类型的变量时，我们可以选择无视它，任由它滋生更多的 "),t("code",[a._v("any")]),a._v("。")]),a._v(" "),t("p",[a._v("我们也可以选择改进它，通过类型断言及时的把 "),t("code",[a._v("any")]),a._v(" 断言为精确的类型，亡羊补牢，使我们的代码向着高可维护性的目标发展。")]),a._v(" "),t("p",[a._v("举例来说，历史遗留的代码中有个 "),t("code",[a._v("getCacheData")]),a._v("，它的返回值是 "),t("code",[a._v("any")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function getCacheData(key: string): any {\n    return (window as any).cache[key];\n}\n")])])]),t("p",[a._v("那么我们在使用它时，最好能够将调用了它之后的返回值断言成一个精确的类型，这样就方便了后续的操作：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function getCacheData(key: string): any {\n    return (window as any).cache[key];\n}\n\ninterface Cat {\n    name: string;\n    run(): void;\n}\n\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n")])])]),t("p",[a._v("上面的例子中，我们调用完 "),t("code",[a._v("getCacheData")]),a._v(" 之后，立即将它断言为 "),t("code",[a._v("Cat")]),a._v(" 类型。这样的话明确了 "),t("code",[a._v("tom")]),a._v(" 的类型，后续对 "),t("code",[a._v("tom")]),a._v(" 的访问时就有了代码补全，提高了代码的可维护性。")]),a._v(" "),t("h1",{attrs:{id:"类型别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[a._v("#")]),a._v(" 类型别名")]),a._v(" "),t("p",[a._v("类型别名用来给一个类型起个新名字。类型别名常用于联合类型")]),a._v(" "),t("h2",{attrs:{id:"例如"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例如"}},[a._v("#")]),a._v(" 例如")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("type Name = string;\ntype NameResolver = () => string;\ntype NameOrResolver = Name | NameResolver;\nfunction getName(n: NameOrResolver): Name {\n    if (typeof n === 'string') {\n        return n;\n    } else {\n        return n();\n    }\n}\n")])])]),t("h1",{attrs:{id:"字面量类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型"}},[a._v("#")]),a._v(" 字面量类型")]),a._v(" "),t("p",[a._v("字符串字面量类型用来约束取值只能是某几个字符串中的一个。")]),a._v(" "),t("h2",{attrs:{id:"例如-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例如-2"}},[a._v("#")]),a._v(" 例如")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("type EventNames = 'click' | 'scroll' | 'mousemove';\nfunction handleEvent(ele: Element, event: EventNames) {\n    // do something\n}\n\nhandleEvent(document.getElementById('hello'), 'scroll');  // 没问题\nhandleEvent(document.getElementById('world'), 'dblclick'); // 报错，event 不能为 'dblclick'\n\n// index.ts(7,47): error TS2345: Argument of type '\"dblclick\"' is not assignable to parameter of type 'EventNames'.\n")])])]),t("p",[a._v("上例中，我们使用 "),t("code",[a._v("type")]),a._v(" 定了一个字符串字面量类型 "),t("code",[a._v("EventNames")]),a._v("，它只能取三种字符串中的一种。")]),a._v(" "),t("p",[a._v("注意，**类型别名与字符串字面量类型都是使用 "),t("code",[a._v("type")]),a._v(" 进行定义")]),a._v(" "),t("h1",{attrs:{id:"泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[a._v("#")]),a._v(" 泛型")]),a._v(" "),t("p",[a._v("泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。")]),a._v(" "),t("h2",{attrs:{id:"简单的例子-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的例子-3"}},[a._v("#")]),a._v(" 简单的例子")]),a._v(" "),t("p",[a._v("首先，我们来实现一个函数 "),t("code",[a._v("createArray")]),a._v("，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function createArray(length: number, value: any): Array<any> {\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n")])])]),t("p",[a._v("上例中，我们使用了来定义返回值的类型。")]),a._v(" "),t("p",[a._v("这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型：")]),a._v(" "),t("p",[t("code",[a._v("Array<any>")]),a._v(" 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 "),t("code",[a._v("value")]),a._v(" 的类型。")]),a._v(" "),t("p",[a._v("这时候，泛型就派上用场了：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function createArray<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray<string>(3, 'x'); // ['x', 'x', 'x']\n")])])]),t("p",[a._v("上例中，我们在函数名后添加了 "),t("code",[a._v("<T>")]),a._v("，其中 "),t("code",[a._v("T")]),a._v(" 用来指代任意输入的类型，在后面的输入 "),t("code",[a._v("value: T")]),a._v(" 和输出 "),t("code",[a._v("Array<T>")]),a._v(" 中即可使用了。")]),a._v(" "),t("p",[a._v("接着在调用的时候，可以指定它具体的类型为 "),t("code",[a._v("string")]),a._v("。当然，也可以不手动指定，而让类型推论自动推算出来：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function createArray<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3, 'x'); // ['x', 'x', 'x']\n")])])]),t("h2",{attrs:{id:"多个类型参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个类型参数"}},[a._v("#")]),a._v(" 多个类型参数")]),a._v(" "),t("p",[a._v("定义泛型的时候，可以一次定义多个类型参数：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("function swap<T, U>(tuple: [T, U]): [U, T] {\n    return [tuple[1], tuple[0]];\n}\n\nswap([7, 'seven']); // ['seven', 7]\n")])])]),t("p",[a._v("上例中，我们定义了一个 "),t("code",[a._v("swap")]),a._v(" 函数，用来交换输入的元组。")]),a._v(" "),t("h1",{attrs:{id:"内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[a._v("#")]),a._v(" 内置对象")]),a._v(" "),t("p",[a._v("JavaScript 中有很多"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer"}},[a._v("内置对象"),t("OutboundLink")],1),a._v("，它们可以直接在 TypeScript 中当做定义好了的类型。")]),a._v(" "),t("p",[a._v("内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。")]),a._v(" "),t("h2",{attrs:{id:"ecmascript-的内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-的内置对象"}},[a._v("#")]),a._v(" ECMAScript 的内置对象")]),a._v(" "),t("p",[a._v("ECMAScript 标准提供的内置对象有：")]),a._v(" "),t("p",[t("code",[a._v("Boolean")]),a._v("、"),t("code",[a._v("Error")]),a._v("、"),t("code",[a._v("Date")]),a._v("、"),t("code",[a._v("RegExp")]),a._v(" 等。")]),a._v(" "),t("p",[a._v("我们可以在 TypeScript 中将变量定义为这些类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let b: Boolean = new Boolean(1);\nlet e: Error = new Error('Error occurred');\nlet d: Date = new Date();\nlet r: RegExp = /[a-z]/;\n")])])]),t("p",[a._v("更多的内置对象，可以查看 "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer"}},[a._v("MDN 的文档"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("p",[a._v("而他们的定义文件，则在 "),t("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/tree/master/src/lib",target:"_blank",rel:"noopener noreferrer"}},[a._v("TypeScript 核心库的定义文件"),t("OutboundLink")],1),a._v("中。")]),a._v(" "),t("h2",{attrs:{id:"dom-和-bom-的内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-和-bom-的内置对象"}},[a._v("#")]),a._v(" DOM 和 BOM 的内置对象")]),a._v(" "),t("p",[a._v("DOM 和 BOM 提供的内置对象有：")]),a._v(" "),t("p",[t("code",[a._v("Document")]),a._v("、"),t("code",[a._v("HTMLElement")]),a._v("、"),t("code",[a._v("Event")]),a._v("、"),t("code",[a._v("NodeList")]),a._v(" 等。")]),a._v(" "),t("p",[a._v("TypeScript 中会经常用到这些类型：")]),a._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("let body: HTMLElement = document.body;\nlet allDiv: NodeList = document.querySelectorAll('div');\ndocument.addEventListener('click', function(e: MouseEvent) {\n  // Do something\n});\n")])])]),t("p",[a._v("它们的定义文件同样在 "),t("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/tree/master/src/lib",target:"_blank",rel:"noopener noreferrer"}},[a._v("TypeScript 核心库的定义文件"),t("OutboundLink")],1),a._v("中。")])])}),[],!1,null,null,null);t.default=s.exports}}]);