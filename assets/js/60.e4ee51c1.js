(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{373:function(e,s,a){"use strict";a.r(s);var r=a(7),t=Object(r.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_03-express"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-express"}},[e._v("#")]),e._v(" 03-express")]),e._v(" "),s("h1",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),s("blockquote",[s("p",[e._v("使用express搭建服务器更方便")])]),e._v(" "),s("p",[e._v("Express是Node.js的一种轻量级Web应用程序框架，它提供了一组强大的特性和工具，帮助开发人员快速创建可靠、灵活的Web应用程序。Express是一个基于中间件的框架，它允许开发人员通过编写简单的模块化代码来构建Web应用程序。")]),e._v(" "),s("p",[e._v("以下是Express的一些主要特点：")]),e._v(" "),s("ol",[s("li",[e._v("中间件架构：Express基于中间件构建，允许开发人员将应用程序拆分为多个小的、可重用的部分，从而使应用程序更加灵活和易于维护。")]),e._v(" "),s("li",[e._v("路由系统：Express提供了一个灵活的路由系统，允许开发人员将请求映射到相应的处理程序，使得代码的组织和管理变得更加容易。")]),e._v(" "),s("li",[e._v("模板引擎：Express支持多种模板引擎，如EJS、Pug、Handlebars等，可以轻松地生成HTML视图。")]),e._v(" "),s("li",[e._v("简单易用：Express提供了简单易用的API，使得开发人员可以快速编写Web应用程序，并且容易上手。")]),e._v(" "),s("li",[e._v("丰富的插件：Express有大量的插件，可以帮助开发人员实现各种功能，如cookie解析、body解析、会话管理等等。")])]),e._v(" "),s("h1",{attrs:{id:"用nodejs原生搭建服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用nodejs原生搭建服务"}},[e._v("#")]),e._v(" 用nodejs原生搭建服务")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("// 利用http内置模块,开启一个服务器// 1.  引入httpconst http = require('http')// 2. 创建服务对象const server = http.createServer((req, res) => {  // 用nodejs原生搭建服务的不便之处:  // 1. 响应中文的情况下,程序员需要额外进行编码  // 2. 所有的请求都进入了createServer的回调,增加的编码的难度(比如: 需要程序员判断请求方式)  // 3. 获取参数不方便  // 4. 其他...  res.setHeader('content-type', 'text/html;charset=utf-8')  if(req.url === '/a'){      res.end('你好, 接收到了path为/a的请求')  }  if(req.url.startsWith('/b')){      const query = req.url.split('?')[1]      res.end(`你好, 接收到了path为/b的请求以及参数${query}`)  }})// 3. 开启服务器server.listen(5000, (err) => {  if (err) console.log('服务器启动失败')  else console.log('服务器启动成功')})\n")])])]),s("h1",{attrs:{id:"用express搭建服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用express搭建服务"}},[e._v("#")]),e._v(" 用express搭建服务")]),e._v(" "),s("blockquote",[s("p",[e._v("需要提前下载express")])]),e._v(" "),s("p",[e._v("npm i express")]),e._v(" "),s("div",{staticClass:"language-SQL extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 1. 引入expressconst express = require('express')// 2. 创建应用对象const app = express()// 3. 配置路由// 路由: 路由是指在计算机网络中将数据包从源地址传递到目的地址的过程// 简单理解路由: 一套一一对应的规则// 后端路由: url和网络资源的一一对应规则app.get('/a', (req, res) => {  res.send('你好,哈哈哈-/a-get')})app.get('/b', (req, res) => {  const query = req.query //可以轻松获取到浏览器上传的查询字符串  res.send(`你好,哈哈哈-/b-get-${query.name}-${query.age}`)})app.post('/b', (req, res) => {  res.send('你好,嘻嘻嘻-/b-post')})//4. 开启服务器app.listen(5000, (err) => {  if (err) console.log('服务器启动失败')  else console.log('服务器启动成功')})")]),e._v("\n")])])]),s("h1",{attrs:{id:"express中req常用的属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#express中req常用的属性和方法"}},[e._v("#")]),e._v(" express中req常用的属性和方法")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("属性/方法")]),e._v(" "),s("th",[e._v("描述")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("request.query")]),e._v(" "),s("td",[e._v("获取get请求查询字符串的参数，拿到的是一个对象")])]),e._v(" "),s("tr",[s("td",[e._v("request.params")]),e._v(" "),s("td",[e._v("获取get请求参数路由的参数，拿到的是一个对象")])]),e._v(" "),s("tr",[s("td",[e._v("request.get(‘键’)")]),e._v(" "),s("td",[e._v("获取请求头中指定key对应的value")])]),e._v(" "),s("tr",[s("td",[e._v("request.body")]),e._v(" "),s("td",[e._v("获取post请求体，拿到的是一个对象（要借助一个中间件）")])])])]),e._v(" "),s("h1",{attrs:{id:"express中res常用的属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#express中res常用的属性和方法"}},[e._v("#")]),e._v(" express中res常用的属性和方法")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("属性/方法")]),e._v(" "),s("th",[e._v("描述")]),e._v(" "),s("th",[e._v("注意")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("response.send(响应内容)")]),e._v(" "),s("td",[e._v("给浏览器做出一个响应")]),e._v(" "),s("td",[e._v("1. 如果传入的是数字,则修改的是状态码(不建议传入数字) 2. 如果传入的是数组或对象,则自动转成字符串的形式3. 会自动设置响应头处理中文问题")])]),e._v(" "),s("tr",[s("td",[e._v("response.download(‘路径’)")]),e._v(" "),s("td",[e._v("告诉浏览器下载一个文件")]),e._v(" "),s("td",[e._v("相对路径和绝对路径都可以")])]),e._v(" "),s("tr",[s("td",[e._v("response.sendFile(‘路径’)")]),e._v(" "),s("td",[e._v("给浏览器发送一个文件")]),e._v(" "),s("td",[e._v("1. 必须传入绝对路径 2. 如果响应的文件,不是浏览器可以解析的文件,则直接下载.如果可以解析,则直接展示")])]),e._v(" "),s("tr",[s("td",[e._v("response.redirect(‘/目标路径’)")]),e._v(" "),s("td",[e._v("重定向到一个新的地址（url）")]),e._v(" "),s("td")]),e._v(" "),s("tr",[s("td",[e._v("response.set(header,value)")]),e._v(" "),s("td",[e._v("自定义响应头内容")]),e._v(" "),s("td",[e._v("了解")])]),e._v(" "),s("tr",[s("td",[e._v("response.get(‘键’)")]),e._v(" "),s("td",[e._v("获取响应头指定key对应的value")]),e._v(" "),s("td",[e._v("了解")])]),e._v(" "),s("tr",[s("td",[e._v("res.status(code)")]),e._v(" "),s("td",[e._v("设置响应状态码")]),e._v(" "),s("td",[e._v("了解")])])])]),e._v(" "),s("h1",{attrs:{id:"express的中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#express的中间件"}},[e._v("#")]),e._v(" express的中间件")]),e._v(" "),s("blockquote",[s("p",[e._v("中间件（Middleware） 是一个函数，它可以访问请求对象（request）, 响应对象（response）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。")])]),e._v(" "),s("p",[s("strong",[e._v("中间件其实就是一个函数. 当浏览器给服务器发送请求,本来应该直接执行服务器的路由的回调. 但是如果有中间件,则先执行中间件,然后执行路由的回调")])]),e._v(" "),s("h2",{attrs:{id:"中间的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间的分类"}},[e._v("#")]),e._v(" 中间的分类:")]),e._v(" "),s("ul",[s("li",[e._v("应用级中间件(自定义中间件): 我们自己写的中间件函数")]),e._v(" "),s("li",[e._v("内置中间件: express内置的中间件")]),e._v(" "),s("li",[e._v("第三方中间件: 别人写的中间件函数,使用之前,需要下载")]),e._v(" "),s("li",[e._v("路由器中间件: 抽离express路由")])]),e._v(" "),s("h2",{attrs:{id:"中间件的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间件的特点"}},[e._v("#")]),e._v(" 中间件的特点:")]),e._v(" "),s("ul",[s("li",[e._v("中间件是线性执行模式. 按照书写顺序,一个接着一个执行")]),e._v(" "),s("li",[e._v("整个请求响应过程中,req对象是同一个,res对象是同一个")]),e._v(" "),s("li",[e._v("中间件中的next表示下一个中间件, 如果调用next.才会继续往下执行.否则不执行后面的中间件和路由回调")])]),e._v(" "),s("p",[s("strong",[e._v("注意: 中间件定义时,一定要写在路由前面. 而且复杂的情况下,要考虑中间件的顺序问题")])]),e._v(" "),s("h2",{attrs:{id:"应用级中间件的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用级中间件的使用"}},[e._v("#")]),e._v(" 应用级中间件的使用")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("const express = require('express')const app = express()// app.use中的函数就是一个应用级的中间件app.use(function (req, res, next) {  //需求: 所有请求的响应头中都要加一个字段: xxx: 123  res.set('xxx', '123')  next()})app.get('/a', (req, res) => {  res.send([1, 2, 3])})app.listen(5000, (error) => {  if (error) console.log('失败')  else console.log('成功')})\n")])])]),s("h2",{attrs:{id:"内置中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置中间件"}},[e._v("#")]),e._v(" 内置中间件")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("const express = require('express')const app = express()// express内置的中间件express.urlencoded可以将post请求请求主体的数据解析之后添加到req.body上app.use(express.urlencoded({ extended: false })) //使用express内置中间件app.post('/a', (req, res) => {  console.log(req.body)  res.send('post')})app.listen(5000, (error) => {  if (error) console.log('失败')  else console.log('成功')})\n")])])]),s("h2",{attrs:{id:"第三方中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方中间件"}},[e._v("#")]),e._v(" 第三方中间件")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("const express = require('express')// 下载 第三方中间件body-parser --\x3e npm i body-parser// 引入第三方中间body-parserconst bodyParser = require('body-parser')//作用和express.urlencoded一样app.use(bodyParser.urlencoded({ extended: false })) // 使用第三方中间件app.get('/a', (req, res) => {  res.send([1, 2, 3])})app.post('/a', (req, res) => {  console.log(req.body)  res.send('post')})app.listen(5000, (error) => {  if (error) console.log('失败')  else console.log('成功')})\n")])])]),s("h2",{attrs:{id:"路由器-router-中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由器-router-中间件"}},[e._v("#")]),e._v(" 路由器(Router)中间件")]),e._v(" "),s("blockquote",[s("p",[e._v("Router 是一个完整的中间件和路由系统，也可以看做是一个小型的app对象")])]),e._v(" "),s("p",[e._v("为什么要使用Router: 为了更好的分类管理route")]),e._v(" "),s("p",[e._v("使用:")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("新建一个router.js")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("//创建router对象const express = require('express')var router = express.Router();router.post('/a', function (req, res) {  res.send('a')})router.post('/b', function (req, res) {  res.send('/b')})//暴露路由器对象module.exports = router\n")])])])]),e._v(" "),s("li",[s("p",[e._v("在server.js中")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("const express = require('express')// 引入router.jsconst router = require('./router')// 只用路由器中间件app.use(router) // 这样就把路由代码分离出去了app.listen(5000, (error) => {  if (error) console.log('失败')  else console.log('成功')})\n")])])])])]),e._v(" "),s("h1",{attrs:{id:"ejs模板引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ejs模板引擎"}},[e._v("#")]),e._v(" EJS模板引擎")]),e._v(" "),s("h2",{attrs:{id:"前置知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[e._v("#")]),e._v(" 前置知识")]),e._v(" "),s("p",[e._v("用户在浏览器中看到的页面大致可以分为两类:")]),e._v(" "),s("ol",[s("li",[e._v("动态页面: 页面的数据会发生变化.比如:电商首页")]),e._v(" "),s("li",[e._v("静态页面: 页面的数据不会发生变化. 比如:技术文档")])]),e._v(" "),s("p",[e._v("其中动态页面按照动态插入数据的不同方式又分为")]),e._v(" "),s("ol",[s("li",[e._v("前端渲染: 浏览器获取到的是一个不完整的页面,通过js动态插入数据. 也就是插入数据过程在浏览器端执行")]),e._v(" "),s("li",[e._v("后端渲染: 浏览器获取到的是一个完整的页面. 动态插入数据的过程,是在服务器端执行的")])]),e._v(" "),s("p",[e._v("前端渲染和后端渲染的优点和缺点:")]),e._v(" "),s("ol",[s("li",[e._v("前端渲染利于前后端分离,缩短开发的周期.后端渲染开发周期相对更长")]),e._v(" "),s("li",[e._v("前端渲染可以分担服务器的工作,减轻服务器压力. 后端渲染,后端要处理数据,也要往html中插入数据工作量太大")]),e._v(" "),s("li",[e._v("前端渲染不利于SEO优化, 后端渲染利于SEO")]),e._v(" "),s("li",[e._v("前端渲染可以让用户打开页面的速度更快. 后端渲染用户打开页面的速度相对较慢")])]),e._v(" "),s("h3",{attrs:{id:"利用模板引擎实现后端渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用模板引擎实现后端渲染"}},[e._v("#")]),e._v(" 利用模板引擎实现后端渲染")]),e._v(" "),s("blockquote",[s("p",[e._v("模板引擎工具有很多,当前课程中介绍使用ejs")])]),e._v(" "),s("ol",[s("li",[s("p",[e._v("下载ejs npm i ejs")])]),e._v(" "),s("li",[s("p",[e._v("将我们需要动态渲染的html页面改成.ejs index.html –> index.ejs")])]),e._v(" "),s("li",[s("p",[e._v("把.ejs模板单独放到一个文件夹中")])]),e._v(" "),s("li",[s("p",[e._v("在server.js中进行配置 app.set(‘view engine’, ‘ejs’) 告诉express.要使用ejs模板引擎 app.set(‘views’, ‘存放模板的路径’) // 告诉express. 模板存放在哪里")])]),e._v(" "),s("li",[s("p",[e._v("使用模板引擎,动态渲染模板,然后响应浏览器 响应对象.render(‘模板的名称’, 数据) 注意: 一般数据就是一个对象")])]),e._v(" "),s("li",[s("p",[e._v("修改模板 在ejs模板中. "),s("code",[e._v("<% %>")]),e._v("是ejs可以解析的语法. 这个语法中可以直接写js代码. 当模板解析的时候,"),s("code",[e._v("<% %>")]),e._v("里面的代码可以运行,但是运行的结果不会渲染到模板中. 如果需要将运行的结果渲染到模板中,应该写 "),s("code",[e._v("<%= js代码 %>")]),e._v(" "),s("strong",[e._v("注意: 如果需要渲染传入模板的数据 "),s("code",[e._v("<%= 传入对象的某个属性 %>")])])]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n</head>\n<body>\n\n<h1>Hello EJS，这是我的第一个EJS</h1>\n\x3c!-- 这些js代码可以被执行 --\x3e\n<%\n    console.log("Hello EJS");\n    var a = 30;\n%>\n\n\x3c!-- 输出转义的数据到模板上 --\x3e\n<h2>用户名 : <%= username %></h2>\n\x3c!-- 输出非转义的数据到模板上 --\x3e\n<h2>用户名 : <%-username%></h2>\n\n\x3c!--  可以包含JS代码与下面拼接在一起 --\x3e\n<% if(a==20){ %>\n <h3>a的值是20</h3>\n<% } %>\n\n<% for(var i=0 ; i<3 ; i++){ %>\n <h3>老师真帅啊！！！！！</h3>\n<% } %>\n\n</body>\n</html>\n\n')])])])])]),e._v(" "),s("h1",{attrs:{id:"cookie和session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session"}},[e._v("#")]),e._v(" cookie和session")]),e._v(" "),s("p",[s("strong",[e._v("注意: http协议是无状态的,浏览器每次给服务器发请求,服务器并不知道是哪个用户请求的,就无法实现登录保持和权限管理")])]),e._v(" "),s("p",[e._v("利用 "),s("code",[e._v("cookie")]),e._v("和 "),s("code",[e._v("session")]),e._v("可以解决上面描述的问题.")]),e._v(" "),s("h2",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" cookie")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("什么是cookie ?")]),e._v(" "),s("p",[e._v("cookie是浏览器端存储数据的一种方式.")])]),e._v(" "),s("li",[s("p",[e._v("cookie的特点:")]),e._v(" "),s("p",[e._v("当浏览器给服务器发送请求的时候,会先查看cookie中是否存储了对应的数据.如果存储了,则浏览器会自动把cookie中的数据添加到请求头中上传给服务器")])]),e._v(" "),s("li",[s("p",[e._v("cookie的不足:")]),e._v(" "),s("p",[e._v("各个浏览器对cookie的数量和大小都有不同的限制，这样就导致我们不能在Cookie中保存过多的信息。一般数量不超过50个，单个大小不超过4kb。")])])]),e._v(" "),s("h2",{attrs:{id:"session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[e._v("#")]),e._v(" session")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("什么是session?")]),e._v(" "),s("p",[e._v("session是服务器端存储数据的一种方式")])]),e._v(" "),s("li",[s("p",[e._v("session和cookie配合流程")]),e._v(" "),s("p",[s("img",{attrs:{src:"Untitled+5ca9af65b3a045acadf728906047a0e2/https:/www.notion.so./assets/cookie%E5%92%8Csession%E9%85%8D%E5%90%88%E6%B5%81%E7%A8%8B.png",alt:"Untitled+5ca9af65b3a045acadf728906047a0e2/https:/www.notion.so./assets/cookie和session配合流程.png"}})])])]),e._v(" "),s("h2",{attrs:{id:"cookie和session的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session的区别"}},[e._v("#")]),e._v(" cookie和session的区别")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("存在的位置：")]),e._v(" "),s("p",[e._v("cookie 是浏览器端存储数据的方式")]),e._v(" "),s("p",[e._v("session 是服务器端存储数据的方式")])]),e._v(" "),s("li",[s("p",[e._v("安全性：")]),e._v(" "),s("p",[e._v("cookie是以明文的方式存放在客户端的，安全性低，可以通过一个加密算法进行加密后存放")]),e._v(" "),s("p",[e._v("session存放于服务器的内存中，所以安全性好")])]),e._v(" "),s("li",[s("p",[e._v("有效期：")]),e._v(" "),s("p",[e._v("cookie的默认有效期是一个 "),s("code",[e._v("会话的时间")]),e._v("(关闭浏览器器表示会话结束). 如果指定了时长,从创建时，就开始计时，固定时间后，cookie失效")]),e._v(" "),s("p",[e._v("session的有效期可以被后端开发人员自定义.")])]),e._v(" "),s("li",[s("p",[e._v("大小：")]),e._v(" "),s("p",[e._v("cookie 保存的数据不能超过4K，很多浏览器都限制一个站点最多保存50个cookie")]),e._v(" "),s("p",[e._v("session 保存数据理论上没有任何限制（内存有多大就能有多大）")])])]),e._v(" "),s("h2",{attrs:{id:"在node中使用cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在node中使用cookie"}},[e._v("#")]),e._v(" 在node中使用cookie")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("下载安装")]),e._v(" "),s("p",[e._v("npm i cookie-parser")])]),e._v(" "),s("li",[s("p",[e._v("引入")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('var cookieParser = require("cookie-parser");\n')])])])]),e._v(" "),s("li",[s("p",[e._v("设置为中间件")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("app.use(cookieParser());\n")])])])]),e._v(" "),s("li",[s("p",[e._v("创建Cookie")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('res.cookie("键","值" [,配置对象]);//设置一个有效期为1天的cookieres.cookie("username","sunwukong" , {maxAge:1000*60*60*24});//设置一个永久有效的cookieres.cookie("username","sunwukong" , {maxAge:1000*60*60*24*365*10});\n')])])])]),e._v(" "),s("li",[s("p",[e._v("修改Cookie")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('//Cookie一旦发送给浏览器，就不能再修改了//但是我们可以使用同名的cookie来替换已有cookieres.cookie("username","zhubajie");\n')])])])]),e._v(" "),s("li",[s("p",[e._v("删除Cookie")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('//可以通过通过使用一个立即失效的cookie来替换cookie的形式来删除cookieres.cookie("username","11",{maxAge:0});//用来删除一个cookieres.clearCookie(“username”)用来删除一个指定cookie\n')])])])]),e._v(" "),s("li",[s("p",[e._v("接收客户端传递过来的cookie：")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("// 备注：cookie-parser中间件会自动把客户端发送过来的cookie解析到request对象上。req.cookies.xxx ：获取cookie上xxx属性对应的值。\n")])])])])]),e._v(" "),s("h2",{attrs:{id:"在浏览器中使用cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在浏览器中使用cookie"}},[e._v("#")]),e._v(" 在浏览器中使用cookie")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("设置cookie")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('document.cookie = "userId=nick123; expires=Wed, 15 Jan 2020 12:00:00 UTC"\n')])])])]),e._v(" "),s("li",[s("p",[e._v("获取cookie")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v('const cookie = document.cookieconsole.log(cookie) // "userId=nick123; expires=Wed, 15 Jan 2020 12:00:00 UTC"\n')])])])])]),e._v(" "),s("h2",{attrs:{id:"在node中使用session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在node中使用session"}},[e._v("#")]),e._v(" 在node中使用session")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("下载安装：")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("npm i express-session  connect-mongo// express-session 提供开启session的中间件// connect-mongo 帮我们将session信息存储到数据库中\n")])])])]),e._v(" "),s("li",[s("p",[e._v("引入express-session模块：")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("const session = require('express-session');\n")])])])]),e._v(" "),s("li",[s("p",[e._v("引入connect-mongo模块：")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v(" const MongoStore = require('connect-mongo')(session);\n")])])])]),e._v(" "),s("li",[s("p",[e._v("编写全局配置对象：")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("app.use(session({          name: 'userid',   //设置cookie的name，默认值是：connect.sid          secret: 'atguigu', //参与加密的字符串（又称签名）          saveUninitialized: false, //是否为每次请求都设置一个cookie用来存储session的id          resave: true ,//是否在每次请求时，强制重新保存session，即使他们没有变化          store: new MongoStore({            url: 'mongodb://localhost:27017/sessions_container',            touchAfter: 24 * 3600 //修改频率（例：//在24小时之内只更新一次）          }),          cookie: {            httpOnly: true, // 开启后前端无法通过 JS 操作cookie            maxAge: 1000*30 // 设置cookie的过期时间          },}));\n")])])])]),e._v(" "),s("li",[s("p",[e._v("向session中添加一个信息")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("req.session.xxxx = yyy\n")])])])]),e._v(" "),s("li",[s("p",[e._v("获取session上的xxx属性：")]),e._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[e._v("const {xxx} = req.session\n")])])])])])])}),[],!1,null,null,null);s.default=t.exports}}]);